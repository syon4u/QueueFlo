From 73249ed390625170992d9e1d8e839def644a1c8a Mon Sep 17 00:00:00 2001
From: Manus AI Agent <manus.ai@example.com>
Date: Mon, 12 May 2025 00:04:18 -0400
Subject: [PATCH] Add all new frontend components, pages, and hooks for
 customer, admin, and staff portals

---
 src/components/admin/AdminDashboardLayout.tsx |  51 ++++
 src/components/admin/LocationManagement.tsx   | 199 +++++++++++++
 .../admin/MessageTemplateManagement.tsx       | 244 +++++++++++++++
 src/components/admin/QueueSettings.tsx        | 201 +++++++++++++
 src/components/admin/ServiceManagement.tsx    | 229 +++++++++++++++
 src/components/admin/StaffManagement.tsx      | 278 ++++++++++++++++++
 src/components/admin/SystemAnalytics.tsx      | 110 +++++++
 .../AppointmentConfirmationStep.tsx           | 103 +++++++
 .../appointments/CustomerDetailsStep.tsx      | 124 ++++++++
 .../appointments/DateTimeSelectionStep.tsx    | 109 +++++++
 src/components/surveys/SurveyForm.tsx         | 175 +++++++++++
 src/hooks/useSurveys.ts                       | 113 +++++++
 src/pages/CustomerDashboardPage.tsx           | 131 +++++++++
 src/pages/StaffQueueManagementPage.tsx        | 209 +++++++++++++
 src/pages/TakeSurveyPage.tsx                  |  32 ++
 15 files changed, 2308 insertions(+)
 create mode 100644 src/components/admin/AdminDashboardLayout.tsx
 create mode 100644 src/components/admin/LocationManagement.tsx
 create mode 100644 src/components/admin/MessageTemplateManagement.tsx
 create mode 100644 src/components/admin/QueueSettings.tsx
 create mode 100644 src/components/admin/ServiceManagement.tsx
 create mode 100644 src/components/admin/StaffManagement.tsx
 create mode 100644 src/components/admin/SystemAnalytics.tsx
 create mode 100644 src/components/appointments/AppointmentConfirmationStep.tsx
 create mode 100644 src/components/appointments/CustomerDetailsStep.tsx
 create mode 100644 src/components/appointments/DateTimeSelectionStep.tsx
 create mode 100644 src/components/surveys/SurveyForm.tsx
 create mode 100644 src/hooks/useSurveys.ts
 create mode 100644 src/pages/CustomerDashboardPage.tsx
 create mode 100644 src/pages/StaffQueueManagementPage.tsx
 create mode 100644 src/pages/TakeSurveyPage.tsx

diff --git a/src/components/admin/AdminDashboardLayout.tsx b/src/components/admin/AdminDashboardLayout.tsx
new file mode 100644
index 0000000..4dba5e5
--- /dev/null
+++ b/src/components/admin/AdminDashboardLayout.tsx
@@ -0,0 +1,51 @@
+import React from 'react';
+import { Link, Outlet, useLocation } from 'react-router-dom';
+import { cn } from "@/lib/utils"; // Assuming you have a utility for class names
+import { LayoutDashboard, MapPin, Settings, Users, BarChart3, MessageSquare, CalendarDays } from 'lucide-react';
+
+const adminNavItems = [
+  { href: "/admin/dashboard", label: "Dashboard", icon: LayoutDashboard },
+  { href: "/admin/locations", label: "Locations", icon: MapPin },
+  { href: "/admin/services", label: "Services", icon: Settings }, // Using Settings icon as placeholder
+  { href: "/admin/staff", label: "Staff", icon: Users },
+  { href: "/admin/appointments", label: "Appointments", icon: CalendarDays },
+  { href: "/admin/queue-settings", label: "Queue Settings", icon: Settings },
+  { href: "/admin/message-templates", label: "Message Templates", icon: MessageSquare },
+  { href: "/admin/analytics", label: "Analytics", icon: BarChart3 },
+];
+
+const AdminDashboardLayout: React.FC = () => {
+  const location = useLocation();
+
+  return (
+    <div className="flex min-h-screen">
+      <aside className="w-64 bg-gray-800 text-white p-4 space-y-2">
+        <h2 className="text-2xl font-semibold mb-6">Admin Panel</h2>
+        <nav>
+          <ul>
+            {adminNavItems.map((item) => (
+              <li key={item.href}>
+                <Link
+                  to={item.href}
+                  className={cn(
+                    "flex items-center space-x-2 px-3 py-2 rounded-md hover:bg-gray-700 transition-colors",
+                    location.pathname.startsWith(item.href) && "bg-gray-700 font-semibold"
+                  )}
+                >
+                  <item.icon className="h-5 w-5" />
+                  <span>{item.label}</span>
+                </Link>
+              </li>
+            ))}
+          </ul>
+        </nav>
+      </aside>
+      <main className="flex-1 p-6 bg-gray-100">
+        <Outlet /> {/* Child routes will render here */}
+      </main>
+    </div>
+  );
+};
+
+export default AdminDashboardLayout;
+
diff --git a/src/components/admin/LocationManagement.tsx b/src/components/admin/LocationManagement.tsx
new file mode 100644
index 0000000..df5ff47
--- /dev/null
+++ b/src/components/admin/LocationManagement.tsx
@@ -0,0 +1,199 @@
+import React, { useState, useEffect, useCallback } from 'react';
+import { useLocations, Location, LocationCreatePayload, LocationUpdatePayload } from '@/hooks/useLocations'; // Adjust path as needed
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Textarea } from "@/components/ui/textarea";
+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogTrigger, DialogClose } from "@/components/ui/dialog";
+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
+import { PlusCircle, Edit, Trash2, Loader2, AlertCircle } from 'lucide-react';
+import { useForm } from 'react-hook-form';
+import { zodResolver } from '@hookform/resolvers/zod';
+import * as z from 'zod';
+
+const locationSchema = z.object({
+  name: z.string().min(1, "Name is required"),
+  address: z.string().optional(),
+  phone_number: z.string().optional(),
+  operating_hours: z.string().optional(), // Could be JSON or structured text
+});
+
+type LocationFormData = z.infer<typeof locationSchema>;
+
+const LocationManagement: React.FC = () => {
+  const { locations, loading, error, fetchLocations, createLocation, updateLocation, deleteLocation } = useLocations();
+  const [isDialogOpen, setIsDialogOpen] = useState(false);
+  const [editingLocation, setEditingLocation] = useState<Location | null>(null);
+
+  const form = useForm<LocationFormData>({
+    resolver: zodResolver(locationSchema),
+    defaultValues: {
+      name: '',
+      address: '',
+      phone_number: '',
+      operating_hours: '',
+    }
+  });
+
+  useEffect(() => {
+    fetchLocations();
+  }, [fetchLocations]);
+
+  useEffect(() => {
+    if (editingLocation) {
+      form.reset({
+        name: editingLocation.name,
+        address: editingLocation.address || '',
+        phone_number: editingLocation.phone_number || '',
+        operating_hours: editingLocation.operating_hours || '',
+      });
+    } else {
+      form.reset();
+    }
+  }, [editingLocation, form]);
+
+  const handleFormSubmit = async (data: LocationFormData) => {
+    try {
+      if (editingLocation) {
+        await updateLocation(editingLocation.id, data as LocationUpdatePayload);
+      } else {
+        await createLocation(data as LocationCreatePayload);
+      }
+      fetchLocations();
+      setIsDialogOpen(false);
+      setEditingLocation(null);
+    } catch (e) {
+      console.error("Failed to save location:", e);
+      // Display error to user, e.g., using a toast
+      alert("Error saving location. Please try again.");
+    }
+  };
+
+  const openEditDialog = (location: Location) => {
+    setEditingLocation(location);
+    setIsDialogOpen(true);
+  };
+
+  const openNewDialog = () => {
+    setEditingLocation(null);
+    form.reset(); // Ensure form is cleared for new entry
+    setIsDialogOpen(true);
+  };
+
+  const handleDelete = async (locationId: string) => {
+    if (window.confirm("Are you sure you want to delete this location?")) {
+      try {
+        await deleteLocation(locationId);
+        fetchLocations();
+      } catch (e) {
+        console.error("Failed to delete location:", e);
+        alert("Error deleting location. Please try again.");
+      }
+    }
+  };
+
+  return (
+    <div className="space-y-6">
+      <div className="flex justify-between items-center">
+        <h2 className="text-2xl font-semibold">Manage Locations</h2>
+        <Button onClick={openNewDialog}>
+          <PlusCircle className="mr-2 h-4 w-4" /> Add New Location
+        </Button>
+      </div>
+
+      {error && (
+        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
+          <strong className="font-bold"><AlertCircle className="inline mr-2" />Error: </strong>
+          <span className="block sm:inline">{error.message || "Could not load locations."}</span>
+        </div>
+      )}
+
+      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
+        <DialogContent className="sm:max-w-[525px]">
+          <DialogHeader>
+            <DialogTitle>{editingLocation ? 'Edit Location' : 'Add New Location'}</DialogTitle>
+            <DialogDescription>
+              {editingLocation ? 'Update the details of this location.' : 'Fill in the details for the new location.'}
+            </DialogDescription>
+          </DialogHeader>
+          <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-4 py-4">
+            <div>
+              <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
+              <Input id="name" {...form.register("name")} className="mt-1" />
+              {form.formState.errors.name && <p className="text-xs text-red-600 mt-1">{form.formState.errors.name.message}</p>}
+            </div>
+            <div>
+              <label htmlFor="address" className="block text-sm font-medium text-gray-700">Address</label>
+              <Textarea id="address" {...form.register("address")} className="mt-1" />
+            </div>
+            <div>
+              <label htmlFor="phone_number" className="block text-sm font-medium text-gray-700">Phone Number</label>
+              <Input id="phone_number" {...form.register("phone_number")} className="mt-1" />
+            </div>
+            <div>
+              <label htmlFor="operating_hours" className="block text-sm font-medium text-gray-700">Operating Hours</label>
+              <Input id="operating_hours" {...form.register("operating_hours")} placeholder="e.g., Mon-Fri: 9am-5pm" className="mt-1" />
+            </div>
+            <DialogFooter>
+              <DialogClose asChild>
+                 <Button type="button" variant="outline">Cancel</Button>
+              </DialogClose>
+              <Button type="submit" disabled={form.formState.isSubmitting}>
+                {form.formState.isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
+                {editingLocation ? 'Save Changes' : 'Create Location'}
+              </Button>
+            </DialogFooter>
+          </form>
+        </DialogContent>
+      </Dialog>
+
+      {loading && !locations.length ? (
+        <div className="flex justify-center items-center py-8">
+          <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
+          <p className="ml-2">Loading locations...</p>
+        </div>
+      ) : (
+        <Card>
+          <Table>
+            <TableHeader>
+              <TableRow>
+                <TableHead>Name</TableHead>
+                <TableHead>Address</TableHead>
+                <TableHead>Phone</TableHead>
+                <TableHead>Operating Hours</TableHead>
+                <TableHead className="text-right">Actions</TableHead>
+              </TableRow>
+            </TableHeader>
+            <TableBody>
+              {locations.map((location) => (
+                <TableRow key={location.id}>
+                  <TableCell className="font-medium">{location.name}</TableCell>
+                  <TableCell>{location.address || '-'}</TableCell>
+                  <TableCell>{location.phone_number || '-'}</TableCell>
+                  <TableCell>{location.operating_hours || '-'}</TableCell>
+                  <TableCell className="text-right space-x-2">
+                    <Button variant="outline" size="sm" onClick={() => openEditDialog(location)}>
+                      <Edit className="h-4 w-4 mr-1" /> Edit
+                    </Button>
+                    <Button variant="destructive" size="sm" onClick={() => handleDelete(location.id)}>
+                      <Trash2 className="h-4 w-4 mr-1" /> Delete
+                    </Button>
+                  </TableCell>
+                </TableRow>
+              ))}
+              {!loading && locations.length === 0 && (
+                 <TableRow>
+                    <TableCell colSpan={5} className="text-center text-gray-500 py-4">
+                        No locations found. Add a new one to get started.
+                    </TableCell>
+                 </TableRow>
+              )}
+            </TableBody>
+          </Table>
+        </Card>
+      )}
+    </div>
+  );
+};
+
+export default LocationManagement;
+
diff --git a/src/components/admin/MessageTemplateManagement.tsx b/src/components/admin/MessageTemplateManagement.tsx
new file mode 100644
index 0000000..42b6d37
--- /dev/null
+++ b/src/components/admin/MessageTemplateManagement.tsx
@@ -0,0 +1,244 @@
+import React, { useState, useEffect, useCallback } from 'react';
+import { supabase } from '@/integrations/supabase/client'; // Adjust path
+import { Database } from '@/integrations/supabase/types'; // Adjust path
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Textarea } from "@/components/ui/textarea";
+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogTrigger, DialogClose } from "@/components/ui/dialog";
+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
+import { PlusCircle, Edit, Trash2, Loader2, AlertCircle, Save } from 'lucide-react';
+import { useForm } from 'react-hook-form';
+import { zodResolver } from '@hookform/resolvers/zod';
+import * as z from 'zod';
+
+export type MessageTemplate = Database["public"]["Tables"]["message_templates"]["Row"];
+export type MessageTemplateCreatePayload = Database["public"]["Tables"]["message_templates"]["Insert"];
+export type MessageTemplateUpdatePayload = Database["public"]["Tables"]["message_templates"]["Update"];
+
+// Define available event types for templates
+const templateEventTypes = [
+  { id: 'appointment_confirmation', name: 'Appointment Confirmation' },
+  { id: 'appointment_reminder', name: 'Appointment Reminder' },
+  { id: 'appointment_cancellation_customer', name: 'Appointment Cancellation (Customer)' },
+  { id: 'appointment_cancellation_staff', name: 'Appointment Cancellation (Staff)' },
+  { id: 'queue_update', name: 'Queue Position Update' },
+  { id: 'service_completion_survey', name: 'Service Completion & Survey Link' },
+  // Add more as needed
+];
+
+const messageTemplateSchema = z.object({
+  template_name: z.string().min(1, "Template name is required"),
+  event_type: z.string().min(1, "Event type is required"),
+  subject: z.string().min(1, "Subject is required"),
+  body: z.string().min(1, "Body is required"),
+  is_active: z.boolean().default(true),
+});
+
+type MessageTemplateFormData = z.infer<typeof messageTemplateSchema>;
+
+// useMessageTemplates hook was created earlier, assuming it's available and functional.
+// If not, it would need to be created similar to other management hooks.
+import { useMessageTemplates } from '@/hooks/useMessageTemplates';
+
+const MessageTemplateManagement: React.FC = () => {
+  const { templates, loading, error, fetchTemplates, createTemplate, updateTemplate, deleteTemplate } = useMessageTemplates();
+  const [isDialogOpen, setIsDialogOpen] = useState(false);
+  const [editingTemplate, setEditingTemplate] = useState<MessageTemplate | null>(null);
+
+  const form = useForm<MessageTemplateFormData>({
+    resolver: zodResolver(messageTemplateSchema),
+    defaultValues: {
+      template_name: '',
+      event_type: '',
+      subject: '',
+      body: '',
+      is_active: true,
+    }
+  });
+
+  useEffect(() => {
+    fetchTemplates();
+  }, [fetchTemplates]);
+
+  useEffect(() => {
+    if (editingTemplate) {
+      form.reset({
+        template_name: editingTemplate.template_name,
+        event_type: editingTemplate.event_type,
+        subject: editingTemplate.subject,
+        body: editingTemplate.body,
+        is_active: editingTemplate.is_active,
+      });
+    } else {
+      form.reset({
+        template_name: '',
+        event_type: '',
+        subject: '',
+        body: '',
+        is_active: true,
+      });
+    }
+  }, [editingTemplate, form]);
+
+  const handleFormSubmit = async (data: MessageTemplateFormData) => {
+    try {
+      if (editingTemplate) {
+        await updateTemplate(editingTemplate.id, data as MessageTemplateUpdatePayload);
+      } else {
+        await createTemplate(data as MessageTemplateCreatePayload);
+      }
+      fetchTemplates();
+      setIsDialogOpen(false);
+      setEditingTemplate(null);
+    } catch (e: any) {
+      console.error("Failed to save message template:", e);
+      alert(`Error saving template: ${e.message || 'Please try again.'}`);
+    }
+  };
+
+  const openEditDialog = (template: MessageTemplate) => {
+    setEditingTemplate(template);
+    setIsDialogOpen(true);
+  };
+
+  const openNewDialog = () => {
+    setEditingTemplate(null);
+    form.reset();
+    setIsDialogOpen(true);
+  };
+
+  const handleDelete = async (templateId: string) => {
+    if (window.confirm("Are you sure you want to delete this message template?")) {
+      try {
+        await deleteTemplate(templateId);
+        fetchTemplates();
+      } catch (e: any) {
+        console.error("Failed to delete template:", e);
+        alert(`Error deleting template: ${e.message || 'Please try again.'}`);
+      }
+    }
+  };
+
+  return (
+    <div className="space-y-6">
+      <div className="flex justify-between items-center">
+        <h2 className="text-2xl font-semibold">Manage Message Templates</h2>
+        <Button onClick={openNewDialog}>
+          <PlusCircle className="mr-2 h-4 w-4" /> Add New Template
+        </Button>
+      </div>
+
+      {error && (
+        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
+          <strong className="font-bold"><AlertCircle className="inline mr-2" />Error: </strong>
+          <span className="block sm:inline">{error.message || "Could not load message templates."}</span>
+        </div>
+      )}
+
+      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
+        <DialogContent className="sm:max-w-2xl">
+          <DialogHeader>
+            <DialogTitle>{editingTemplate ? 'Edit Message Template' : 'Add New Message Template'}</DialogTitle>
+            <DialogDescription>
+              Placeholders like {{customerName}}, {{appointmentDate}}, {{queuePosition}} can be used in subject and body.
+            </DialogDescription>
+          </DialogHeader>
+          <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-4 py-4">
+            <div>
+              <label htmlFor="template_name" className="block text-sm font-medium text-gray-700">Template Name</label>
+              <Input id="template_name" {...form.register("template_name")} className="mt-1" />
+              {form.formState.errors.template_name && <p className="text-xs text-red-600 mt-1">{form.formState.errors.template_name.message}</p>}
+            </div>
+            <div>
+              <label htmlFor="event_type" className="block text-sm font-medium text-gray-700">Event Type</label>
+              <Select onValueChange={(value) => form.setValue('event_type', value)} defaultValue={form.getValues('event_type')}>
+                <SelectTrigger className="mt-1">
+                  <SelectValue placeholder="Select an event type" />
+                </SelectTrigger>
+                <SelectContent>
+                  {templateEventTypes.map(type => (
+                    <SelectItem key={type.id} value={type.id}>{type.name}</SelectItem>
+                  ))}
+                </SelectContent>
+              </Select>
+              {form.formState.errors.event_type && <p className="text-xs text-red-600 mt-1">{form.formState.errors.event_type.message}</p>}
+            </div>
+            <div>
+              <label htmlFor="subject" className="block text-sm font-medium text-gray-700">Subject</label>
+              <Input id="subject" {...form.register("subject")} className="mt-1" />
+              {form.formState.errors.subject && <p className="text-xs text-red-600 mt-1">{form.formState.errors.subject.message}</p>}
+            </div>
+            <div>
+              <label htmlFor="body" className="block text-sm font-medium text-gray-700">Body (Email/SMS Content)</label>
+              <Textarea id="body" {...form.register("body")} className="mt-1" rows={6} />
+              {form.formState.errors.body && <p className="text-xs text-red-600 mt-1">{form.formState.errors.body.message}</p>}
+            </div>
+             <div className="flex items-center space-x-2">
+                <input type="checkbox" id="is_active" {...form.register("is_active")} className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" />
+                <label htmlFor="is_active" className="text-sm font-medium text-gray-700">Active</label>
+            </div>
+            <DialogFooter>
+              <DialogClose asChild>
+                 <Button type="button" variant="outline">Cancel</Button>
+              </DialogClose>
+              <Button type="submit" disabled={form.formState.isSubmitting}>
+                {form.formState.isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />}
+                {editingTemplate ? 'Save Changes' : 'Create Template'}
+              </Button>
+            </DialogFooter>
+          </form>
+        </DialogContent>
+      </Dialog>
+
+      {loading && !templates.length ? (
+        <div className="flex justify-center items-center py-8">
+          <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
+          <p className="ml-2">Loading templates...</p>
+        </div>
+      ) : (
+        <Card>
+          <Table>
+            <TableHeader>
+              <TableRow>
+                <TableHead>Name</TableHead>
+                <TableHead>Event Type</TableHead>
+                <TableHead>Subject</TableHead>
+                <TableHead>Active</TableHead>
+                <TableHead className="text-right">Actions</TableHead>
+              </TableRow>
+            </TableHeader>
+            <TableBody>
+              {templates.map((template) => (
+                <TableRow key={template.id}>
+                  <TableCell className="font-medium">{template.template_name}</TableCell>
+                  <TableCell>{templateEventTypes.find(t => t.id === template.event_type)?.name || template.event_type}</TableCell>
+                  <TableCell>{template.subject}</TableCell>
+                  <TableCell>{template.is_active ? 'Yes' : 'No'}</TableCell>
+                  <TableCell className="text-right space-x-2">
+                    <Button variant="outline" size="sm" onClick={() => openEditDialog(template)}>
+                      <Edit className="h-4 w-4 mr-1" /> Edit
+                    </Button>
+                    <Button variant="destructive" size="sm" onClick={() => handleDelete(template.id)}>
+                      <Trash2 className="h-4 w-4 mr-1" /> Delete
+                    </Button>
+                  </TableCell>
+                </TableRow>
+              ))}
+              {!loading && templates.length === 0 && (
+                 <TableRow>
+                    <TableCell colSpan={5} className="text-center text-gray-500 py-4">
+                        No message templates found. Add a new one to get started.
+                    </TableCell>
+                 </TableRow>
+              )}
+            </TableBody>
+          </Table>
+        </Card>
+      )}
+    </div>
+  );
+};
+
+export default MessageTemplateManagement;
+
diff --git a/src/components/admin/QueueSettings.tsx b/src/components/admin/QueueSettings.tsx
new file mode 100644
index 0000000..c942227
--- /dev/null
+++ b/src/components/admin/QueueSettings.tsx
@@ -0,0 +1,201 @@
+import React, { useState, useEffect, useCallback } from 'react';
+import { supabase } from '@/integrations/supabase/client'; // Adjust path
+import { Database } from '@/integrations/supabase/types'; // Adjust path
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Switch } from "@/components/ui/switch";
+import { Label } from "@/components/ui/label";
+import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
+import { Loader2, AlertCircle, Save } from 'lucide-react';
+import { useForm, Controller } from 'react-hook-form';
+import { zodResolver } from '@hookform/resolvers/zod';
+import * as z from 'zod';
+
+// Assuming a single row in queue_configurations, or one per location_id if multi-location
+// For simplicity, this example assumes a global configuration or a specific one (e.g., by ID 'default')
+export type QueueConfiguration = Database["public"]["Tables"]["queue_configurations"]["Row"];
+export type QueueConfigurationUpdatePayload = Database["public"]["Tables"]["queue_configurations"]["Update"];
+
+const queueSettingsSchema = z.object({
+  // id: z.string().uuid(), // Assuming we fetch/update a specific config row
+  max_queue_size: z.coerce.number().int().positive("Max queue size must be a positive integer").optional().nullable(),
+  auto_assign_staff: z.boolean().default(false),
+  estimated_wait_time_factor: z.coerce.number().positive("Factor must be positive").optional().nullable(), // e.g., minutes per queue position
+  allow_walk_ins: z.boolean().default(true),
+  // Add other relevant settings like notification preferences, priority rules, etc.
+});
+
+type QueueSettingsFormData = z.infer<typeof queueSettingsSchema>;
+
+const useQueueSettings = (configurationId: string = "default_config") => { // Assuming a default ID or passed in
+  const [config, setConfig] = useState<QueueConfiguration | null>(null);
+  const [loading, setLoading] = useState(false);
+  const [error, setError] = useState<any>(null);
+  const [saving, setSaving] = useState(false);
+
+  const fetchQueueConfiguration = useCallback(async () => {
+    setLoading(true);
+    setError(null);
+    try {
+      const { data, error: fetchError } = await supabase
+        .from('queue_configurations')
+        .select('*')
+        .eq('id', configurationId) // Or some other unique identifier if not 'id'
+        .single(); // Assuming one global or specific config row
+      if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116: single row not found
+        throw fetchError;
+      }
+      setConfig(data);
+    } catch (e) {
+      setError(e);
+      console.error("Failed to fetch queue configuration:", e);
+    } finally {
+      setLoading(false);
+    }
+  }, [configurationId]);
+
+  const updateQueueConfiguration = async (payload: QueueConfigurationUpdatePayload) => {
+    if (!config && !payload.id) {
+        // If no config exists and no ID is provided for upsert, this is an issue.
+        // For this example, we'll assume an ID is always present or we're updating an existing one.
+        // Or, handle creation if config is null:
+        // const { data, error } = await supabase.from('queue_configurations').insert([{...payload, id: configurationId}]).select().single();
+        console.error("No configuration ID to update and payload doesn't include one.");
+        throw new Error("Configuration ID missing for update.");
+    }
+    setSaving(true);
+    setError(null);
+    try {
+        // If config is null, it means we might be creating it for the first time with the given ID.
+        const operation = config 
+            ? supabase.from('queue_configurations').update(payload).eq('id', config.id)
+            : supabase.from('queue_configurations').insert([{ ...payload, id: configurationId } as QueueConfiguration]); // Ensure 'id' is part of payload if creating
+
+        const { data, error: updateError } = await operation.select().single();
+
+        if (updateError) throw updateError;
+        setConfig(data);
+        return data;
+    } catch (e) {
+        setError(e);
+        console.error("Failed to update queue configuration:", e);
+        throw e;
+    } finally {
+        setSaving(false);
+    }
+  };
+
+  return { config, loading, error, saving, fetchQueueConfiguration, updateQueueConfiguration };
+};
+
+const QueueSettings: React.FC = () => {
+  // Assuming a single, global configuration for simplicity, identified by a known ID.
+  // In a multi-tenant or multi-location setup, this ID might be dynamic.
+  const CONFIG_ID = "default_queue_config"; // This ID must exist in your queue_configurations table or be creatable.
+  const { config, loading, error, saving, fetchQueueConfiguration, updateQueueConfiguration } = useQueueSettings(CONFIG_ID);
+
+  const form = useForm<QueueSettingsFormData>({
+    resolver: zodResolver(queueSettingsSchema),
+  });
+
+  useEffect(() => {
+    fetchQueueConfiguration();
+  }, [fetchQueueConfiguration]);
+
+  useEffect(() => {
+    if (config) {
+      form.reset({
+        max_queue_size: config.max_queue_size,
+        auto_assign_staff: config.auto_assign_staff || false,
+        estimated_wait_time_factor: config.estimated_wait_time_factor,
+        allow_walk_ins: config.allow_walk_ins === null ? true : config.allow_walk_ins, // Default to true if null
+      });
+    }
+  }, [config, form]);
+
+  const handleFormSubmit = async (data: QueueSettingsFormData) => {
+    try {
+      await updateQueueConfiguration({ ...data, id: CONFIG_ID }); // Ensure ID is passed if it's used for upserting
+      alert("Queue settings updated successfully!");
+      fetchQueueConfiguration(); // Refetch to confirm changes
+    } catch (e) {
+      console.error("Failed to save queue settings:", e);
+      alert("Error saving queue settings. Please try again.");
+    }
+  };
+
+  if (loading && !config) {
+    return (
+      <div className="flex justify-center items-center py-8">
+        <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
+        <p className="ml-2">Loading queue settings...</p>
+      </div>
+    );
+  }
+
+  if (error && !config) { // Show error only if config couldn't be loaded at all
+    return (
+        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
+            <strong className="font-bold"><AlertCircle className="inline mr-2" />Error: </strong>
+            <span className="block sm:inline">{error.message || "Could not load queue settings."} Consider creating default settings if none exist.</span>
+        </div>
+    );
+  }
+  
+  // If config is null after loading and no error, it might mean no settings exist yet.
+  // The form can still be used to create them if `updateQueueConfiguration` handles upsert.
+
+  return (
+    <Card className="max-w-2xl mx-auto">
+      <CardHeader>
+        <CardTitle>Queue Configuration</CardTitle>
+        <CardDescription>Manage settings for the customer queue system.</CardDescription>
+      </CardHeader>
+      <CardContent>
+        <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-6">
+          <div>
+            <Label htmlFor="max_queue_size">Maximum Queue Size</Label>
+            <Input id="max_queue_size" type="number" {...form.register("max_queue_size")} className="mt-1" />
+            {form.formState.errors.max_queue_size && <p className="text-xs text-red-600 mt-1">{form.formState.errors.max_queue_size.message}</p>}
+            <p className="text-xs text-gray-500 mt-1">Leave blank for unlimited size.</p>
+          </div>
+
+          <div className="flex items-center space-x-2">
+            <Controller
+                name="auto_assign_staff"
+                control={form.control}
+                render={({ field }) => <Switch id="auto_assign_staff" checked={field.value} onCheckedChange={field.onChange} />}
+            />
+            <Label htmlFor="auto_assign_staff">Automatically Assign Staff to Queued Customers</Label>
+          </div>
+          {form.formState.errors.auto_assign_staff && <p className="text-xs text-red-600 mt-1">{form.formState.errors.auto_assign_staff.message}</p>}
+
+          <div>
+            <Label htmlFor="estimated_wait_time_factor">Estimated Wait Time Factor</Label>
+            <Input id="estimated_wait_time_factor" type="number" step="0.1" {...form.register("estimated_wait_time_factor")} className="mt-1" />
+            {form.formState.errors.estimated_wait_time_factor && <p className="text-xs text-red-600 mt-1">{form.formState.errors.estimated_wait_time_factor.message}</p>}
+            <p className="text-xs text-gray-500 mt-1">e.g., 5 (minutes per person in queue). Used for display purposes.</p>
+          </div>
+
+          <div className="flex items-center space-x-2">
+             <Controller
+                name="allow_walk_ins"
+                control={form.control}
+                render={({ field }) => <Switch id="allow_walk_ins" checked={field.value} onCheckedChange={field.onChange} />}
+            />
+            <Label htmlFor="allow_walk_ins">Allow Walk-in Customers to Join Queue</Label>
+          </div>
+          {form.formState.errors.allow_walk_ins && <p className="text-xs text-red-600 mt-1">{form.formState.errors.allow_walk_ins.message}</p>}
+
+          <Button type="submit" className="w-full" disabled={saving || loading}>
+            {saving ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />}
+            Save Settings
+          </Button>
+        </form>
+      </CardContent>
+    </Card>
+  );
+};
+
+export default QueueSettings;
+
diff --git a/src/components/admin/ServiceManagement.tsx b/src/components/admin/ServiceManagement.tsx
new file mode 100644
index 0000000..0bfaea3
--- /dev/null
+++ b/src/components/admin/ServiceManagement.tsx
@@ -0,0 +1,229 @@
+import React, { useState, useEffect, useCallback } from 'react';
+import { useServices, Service, ServiceCreatePayload, ServiceUpdatePayload } from '@/hooks/useServices'; // Adjust path as needed
+import { useLocations } from '@/hooks/useLocations'; // To link services to locations
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Textarea } from "@/components/ui/textarea";
+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogTrigger, DialogClose } from "@/components/ui/dialog";
+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
+import { PlusCircle, Edit, Trash2, Loader2, AlertCircle } from 'lucide-react';
+import { useForm, Controller } from 'react-hook-form';
+import { zodResolver } from '@hookform/resolvers/zod';
+import * as z from 'zod';
+
+const serviceSchema = z.object({
+  name: z.string().min(1, "Name is required"),
+  description: z.string().optional(),
+  duration_minutes: z.coerce.number().int().positive("Duration must be a positive number"),
+  price: z.coerce.number().nonnegative("Price cannot be negative").optional(),
+  // category: z.string().optional(), // Add if needed
+  // location_ids: z.array(z.string()).min(1, "At least one location must be selected"), // If linking services to multiple locations directly
+});
+
+type ServiceFormData = z.infer<typeof serviceSchema>;
+
+const ServiceManagement: React.FC = () => {
+  const { services, loading: servicesLoading, error: servicesError, fetchServices, createService, updateService, deleteService } = useServices();
+  // const { locations, fetchLocations, loading: locationsLoading } = useLocations(); // If needed for selection
+  const [isDialogOpen, setIsDialogOpen] = useState(false);
+  const [editingService, setEditingService] = useState<Service | null>(null);
+
+  const form = useForm<ServiceFormData>({
+    resolver: zodResolver(serviceSchema),
+    defaultValues: {
+      name: '',
+      description: '',
+      duration_minutes: 30,
+      price: 0,
+      // location_ids: [],
+    }
+  });
+
+  useEffect(() => {
+    fetchServices();
+    // fetchLocations(); // Fetch locations if needed for a dropdown
+  }, [fetchServices]); // add fetchLocations if used
+
+  useEffect(() => {
+    if (editingService) {
+      form.reset({
+        name: editingService.name,
+        description: editingService.description || '',
+        duration_minutes: editingService.duration_minutes,
+        price: editingService.price || 0,
+        // location_ids: editingService.location_ids || [], // Assuming service has location_ids
+      });
+    } else {
+      form.reset();
+    }
+  }, [editingService, form]);
+
+  const handleFormSubmit = async (data: ServiceFormData) => {
+    try {
+      if (editingService) {
+        await updateService(editingService.id, data as ServiceUpdatePayload);
+      } else {
+        await createService(data as ServiceCreatePayload);
+      }
+      fetchServices();
+      setIsDialogOpen(false);
+      setEditingService(null);
+    } catch (e) {
+      console.error("Failed to save service:", e);
+      alert("Error saving service. Please try again.");
+    }
+  };
+
+  const openEditDialog = (service: Service) => {
+    setEditingService(service);
+    setIsDialogOpen(true);
+  };
+
+  const openNewDialog = () => {
+    setEditingService(null);
+    form.reset();
+    setIsDialogOpen(true);
+  };
+
+  const handleDelete = async (serviceId: string) => {
+    if (window.confirm("Are you sure you want to delete this service?")) {
+      try {
+        await deleteService(serviceId);
+        fetchServices();
+      } catch (e) {
+        console.error("Failed to delete service:", e);
+        alert("Error deleting service. Please try again.");
+      }
+    }
+  };
+
+  return (
+    <div className="space-y-6">
+      <div className="flex justify-between items-center">
+        <h2 className="text-2xl font-semibold">Manage Services</h2>
+        <Button onClick={openNewDialog}>
+          <PlusCircle className="mr-2 h-4 w-4" /> Add New Service
+        </Button>
+      </div>
+
+      {servicesError && (
+        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
+          <strong className="font-bold"><AlertCircle className="inline mr-2" />Error: </strong>
+          <span className="block sm:inline">{servicesError.message || "Could not load services."}</span>
+        </div>
+      )}
+
+      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
+        <DialogContent className="sm:max-w-[525px]">
+          <DialogHeader>
+            <DialogTitle>{editingService ? 'Edit Service' : 'Add New Service'}</DialogTitle>
+            <DialogDescription>
+              {editingService ? 'Update the details of this service.' : 'Fill in the details for the new service.'}
+            </DialogDescription>
+          </DialogHeader>
+          <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-4 py-4">
+            <div>
+              <label htmlFor="name" className="block text-sm font-medium text-gray-700">Service Name</label>
+              <Input id="name" {...form.register("name")} className="mt-1" />
+              {form.formState.errors.name && <p className="text-xs text-red-600 mt-1">{form.formState.errors.name.message}</p>}
+            </div>
+            <div>
+              <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
+              <Textarea id="description" {...form.register("description")} className="mt-1" />
+            </div>
+            <div>
+              <label htmlFor="duration_minutes" className="block text-sm font-medium text-gray-700">Duration (minutes)</label>
+              <Input id="duration_minutes" type="number" {...form.register("duration_minutes")} className="mt-1" />
+              {form.formState.errors.duration_minutes && <p className="text-xs text-red-600 mt-1">{form.formState.errors.duration_minutes.message}</p>}
+            </div>
+            <div>
+              <label htmlFor="price" className="block text-sm font-medium text-gray-700">Price (optional)</label>
+              <Input id="price" type="number" step="0.01" {...form.register("price")} className="mt-1" />
+               {form.formState.errors.price && <p className="text-xs text-red-600 mt-1">{form.formState.errors.price.message}</p>}
+            </div>
+            {/* Example for linking to locations - requires locations to be fetched and a multi-select component */}
+            {/* <div>
+              <label htmlFor="location_ids" className="block text-sm font-medium text-gray-700">Available at Locations</label>
+              <Controller
+                name="location_ids"
+                control={form.control}
+                render={({ field }) => (
+                  <Select onValueChange={field.onChange} defaultValue={field.value?.join(',')}>
+                     <SelectTrigger className="mt-1">
+                        <SelectValue placeholder="Select locations" />
+                     </SelectTrigger>
+                     <SelectContent>
+                        {locationsLoading ? <SelectItem value="loading" disabled>Loading...</SelectItem> :
+                           locations.map(loc => <SelectItem key={loc.id} value={loc.id}>{loc.name}</SelectItem>)
+                        }
+                     </SelectContent>
+                  </Select>
+                )}
+              />
+              {form.formState.errors.location_ids && <p className="text-xs text-red-600 mt-1">{form.formState.errors.location_ids.message}</p>}
+            </div> */}
+            <DialogFooter>
+              <DialogClose asChild>
+                <Button type="button" variant="outline">Cancel</Button>
+              </DialogClose>
+              <Button type="submit" disabled={form.formState.isSubmitting}>
+                {form.formState.isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
+                {editingService ? 'Save Changes' : 'Create Service'}
+              </Button>
+            </DialogFooter>
+          </form>
+        </DialogContent>
+      </Dialog>
+
+      {servicesLoading && !services.length ? (
+        <div className="flex justify-center items-center py-8">
+          <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
+          <p className="ml-2">Loading services...</p>
+        </div>
+      ) : (
+        <Card>
+          <Table>
+            <TableHeader>
+              <TableRow>
+                <TableHead>Name</TableHead>
+                <TableHead>Description</TableHead>
+                <TableHead>Duration</TableHead>
+                <TableHead>Price</TableHead>
+                <TableHead className="text-right">Actions</TableHead>
+              </TableRow>
+            </TableHeader>
+            <TableBody>
+              {services.map((service) => (
+                <TableRow key={service.id}>
+                  <TableCell className="font-medium">{service.name}</TableCell>
+                  <TableCell>{service.description || '-'}</TableCell>
+                  <TableCell>{service.duration_minutes} min</TableCell>
+                  <TableCell>${service.price !== null && service.price !== undefined ? service.price.toFixed(2) : '-'}</TableCell>
+                  <TableCell className="text-right space-x-2">
+                    <Button variant="outline" size="sm" onClick={() => openEditDialog(service)}>
+                      <Edit className="h-4 w-4 mr-1" /> Edit
+                    </Button>
+                    <Button variant="destructive" size="sm" onClick={() => handleDelete(service.id)}>
+                      <Trash2 className="h-4 w-4 mr-1" /> Delete
+                    </Button>
+                  </TableCell>
+                </TableRow>
+              ))}
+              {!servicesLoading && services.length === 0 && (
+                 <TableRow>
+                    <TableCell colSpan={5} className="text-center text-gray-500 py-4">
+                        No services found. Add a new one to get started.
+                    </TableCell>
+                 </TableRow>
+              )}
+            </TableBody>
+          </Table>
+        </Card>
+      )}
+    </div>
+  );
+};
+
+export default ServiceManagement;
+
diff --git a/src/components/admin/StaffManagement.tsx b/src/components/admin/StaffManagement.tsx
new file mode 100644
index 0000000..86f37f9
--- /dev/null
+++ b/src/components/admin/StaffManagement.tsx
@@ -0,0 +1,278 @@
+import React, { useState, useEffect, useCallback } from 'react';
+import { supabase } from '@/integrations/supabase/client'; // Adjust path as needed
+import { Database } from '@/integrations/supabase/types'; // Adjust path
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogTrigger, DialogClose } from "@/components/ui/dialog";
+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
+import { PlusCircle, Edit, Trash2, Loader2, AlertCircle } from 'lucide-react';
+import { useForm } from 'react-hook-form';
+import { zodResolver } from '@hookform/resolvers/zod';
+import * as z from 'zod';
+
+// Assuming a simplified staff profile for now. Expand as needed.
+// This might involve joining with a 'users' table if staff are also app users.
+export type StaffProfile = Database["public"]["Tables"]["staff_profiles"]["Row"];
+export type StaffProfileCreatePayload = Database["public"]["Tables"]["staff_profiles"]["Insert"];
+export type StaffProfileUpdatePayload = Database["public"]["Tables"]["staff_profiles"]["Update"];
+
+// Placeholder for roles - in a real app, these might come from a DB table or config
+const staffRoles = [
+  { id: 'staff', name: 'Staff' },
+  { id: 'manager', name: 'Manager' },
+  { id: 'admin', name: 'Administrator' },
+];
+
+const staffFormSchema = z.object({
+  user_id: z.string().uuid("Valid User ID is required (must be an existing user in auth.users)"), // Assuming this links to auth.users.id
+  full_name: z.string().min(1, "Full name is required"),
+  role: z.string().min(1, "Role is required"), // e.g., 'staff', 'manager'
+  // location_id: z.string().uuid("Location is required").optional(), // If staff are tied to a single location
+  // Add other fields like contact_info, specializations, etc.
+});
+
+type StaffFormData = z.infer<typeof staffFormSchema>;
+
+const useStaffManagement = () => {
+  const [staffList, setStaffList] = useState<StaffProfile[]>([]);
+  const [loading, setLoading] = useState(false);
+  const [error, setError] = useState<any>(null);
+
+  const fetchStaff = useCallback(async () => {
+    setLoading(true);
+    setError(null);
+    try {
+      const { data, error } = await supabase
+        .from('staff_profiles') // Ensure this table exists
+        .select('*'); // Adjust columns as needed, e.g., join with users table for email
+      if (error) throw error;
+      setStaffList(data || []);
+    } catch (e) {
+      setError(e);
+      console.error("Failed to fetch staff:", e);
+    } finally {
+      setLoading(false);
+    }
+  }, []);
+
+  const createStaffMember = async (payload: StaffProfileCreatePayload) => {
+    const { data, error } = await supabase
+      .from('staff_profiles')
+      .insert(payload)
+      .select();
+    if (error) throw error;
+    return data;
+  };
+
+  const updateStaffMember = async (id: string, payload: StaffProfileUpdatePayload) => {
+    const { data, error } = await supabase
+      .from('staff_profiles')
+      .update(payload)
+      .eq('id', id)
+      .select();
+    if (error) throw error;
+    return data;
+  };
+
+  const deleteStaffMember = async (id: string) => {
+    const { error } = await supabase
+      .from('staff_profiles')
+      .delete()
+      .eq('id', id);
+    if (error) throw error;
+  };
+
+  return { staffList, loading, error, fetchStaff, createStaffMember, updateStaffMember, deleteStaffMember };
+};
+
+const StaffManagement: React.FC = () => {
+  const { staffList, loading, error, fetchStaff, createStaffMember, updateStaffMember, deleteStaffMember } = useStaffManagement();
+  const [isDialogOpen, setIsDialogOpen] = useState(false);
+  const [editingStaff, setEditingStaff] = useState<StaffProfile | null>(null);
+
+  // TODO: Fetch actual users from auth.users to populate a dropdown for user_id selection
+  // For now, user_id will be a manual input, which is not ideal for UX.
+
+  const form = useForm<StaffFormData>({
+    resolver: zodResolver(staffFormSchema),
+    defaultValues: {
+      user_id: '',
+      full_name: '',
+      role: '',
+    }
+  });
+
+  useEffect(() => {
+    fetchStaff();
+  }, [fetchStaff]);
+
+  useEffect(() => {
+    if (editingStaff) {
+      form.reset({
+        user_id: editingStaff.user_id || '', // user_id should always exist if it's a FK
+        full_name: editingStaff.full_name || '',
+        role: editingStaff.role || '',
+      });
+    } else {
+      form.reset();
+    }
+  }, [editingStaff, form]);
+
+  const handleFormSubmit = async (data: StaffFormData) => {
+    try {
+      if (editingStaff) {
+        // For update, user_id typically shouldn't change. Only other profile details.
+        const updatePayload: StaffProfileUpdatePayload = { ...data };
+        delete (updatePayload as any).user_id; // Prevent trying to update user_id if it's part of the form but not updatable here
+        await updateStaffMember(editingStaff.id, updatePayload);
+      } else {
+        await createStaffMember(data as StaffProfileCreatePayload);
+      }
+      fetchStaff();
+      setIsDialogOpen(false);
+      setEditingStaff(null);
+    } catch (e: any) {
+      console.error("Failed to save staff member:", e);
+      alert(`Error saving staff member: ${e.message || 'Please try again.'}`);
+    }
+  };
+
+  const openEditDialog = (staff: StaffProfile) => {
+    setEditingStaff(staff);
+    setIsDialogOpen(true);
+  };
+
+  const openNewDialog = () => {
+    setEditingStaff(null);
+    form.reset();
+    setIsDialogOpen(true);
+  };
+
+  const handleDelete = async (staffId: string) => {
+    if (window.confirm("Are you sure you want to delete this staff member?")) {
+      try {
+        await deleteStaffMember(staffId);
+        fetchStaff();
+      } catch (e: any) {
+        console.error("Failed to delete staff member:", e);
+        alert(`Error deleting staff member: ${e.message || 'Please try again.'}`);
+      }
+    }
+  };
+
+  return (
+    <div className="space-y-6">
+      <div className="flex justify-between items-center">
+        <h2 className="text-2xl font-semibold">Manage Staff</h2>
+        <Button onClick={openNewDialog}>
+          <PlusCircle className="mr-2 h-4 w-4" /> Add New Staff
+        </Button>
+      </div>
+
+      {error && (
+        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
+          <strong className="font-bold"><AlertCircle className="inline mr-2" />Error: </strong>
+          <span className="block sm:inline">{error.message || "Could not load staff list."}</span>
+        </div>
+      )}
+
+      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
+        <DialogContent className="sm:max-w-[525px]">
+          <DialogHeader>
+            <DialogTitle>{editingStaff ? 'Edit Staff Member' : 'Add New Staff Member'}</DialogTitle>
+            <DialogDescription>
+              {editingStaff ? 'Update the details of this staff member.' : 'Fill in the details for the new staff member.'}
+            </DialogDescription>
+          </DialogHeader>
+          <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-4 py-4">
+            <div>
+              <label htmlFor="user_id" className="block text-sm font-medium text-gray-700">User ID (from Auth)</label>
+              <Input id="user_id" {...form.register("user_id")} className="mt-1" placeholder="Enter existing auth.users UUID" disabled={!!editingStaff} />
+              {form.formState.errors.user_id && <p className="text-xs text-red-600 mt-1">{form.formState.errors.user_id.message}</p>}
+              <p className="text-xs text-gray-500 mt-1">This should be the ID of an existing user in the system's authentication table.</p>
+            </div>
+            <div>
+              <label htmlFor="full_name" className="block text-sm font-medium text-gray-700">Full Name</label>
+              <Input id="full_name" {...form.register("full_name")} className="mt-1" />
+              {form.formState.errors.full_name && <p className="text-xs text-red-600 mt-1">{form.formState.errors.full_name.message}</p>}
+            </div>
+            <div>
+              <label htmlFor="role" className="block text-sm font-medium text-gray-700">Role</label>
+              <Select onValueChange={(value) => form.setValue('role', value)} defaultValue={form.getValues('role')}>
+                <SelectTrigger className="mt-1">
+                  <SelectValue placeholder="Select a role" />
+                </SelectTrigger>
+                <SelectContent>
+                  {staffRoles.map(role => (
+                    <SelectItem key={role.id} value={role.id}>{role.name}</SelectItem>
+                  ))}
+                </SelectContent>
+              </Select>
+              {form.formState.errors.role && <p className="text-xs text-red-600 mt-1">{form.formState.errors.role.message}</p>}
+            </div>
+            {/* Add fields for location assignment, services they can perform, etc. */}
+            <DialogFooter>
+              <DialogClose asChild>
+                 <Button type="button" variant="outline">Cancel</Button>
+              </DialogClose>
+              <Button type="submit" disabled={form.formState.isSubmitting}>
+                {form.formState.isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
+                {editingStaff ? 'Save Changes' : 'Create Staff Member'}
+              </Button>
+            </DialogFooter>
+          </form>
+        </DialogContent>
+      </Dialog>
+
+      {loading && !staffList.length ? (
+        <div className="flex justify-center items-center py-8">
+          <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
+          <p className="ml-2">Loading staff...</p>
+        </div>
+      ) : (
+        <Card>
+          <Table>
+            <TableHeader>
+              <TableRow>
+                <TableHead>Name</TableHead>
+                <TableHead>User ID</TableHead>
+                <TableHead>Role</TableHead>
+                {/* <TableHead>Location</TableHead> */}
+                <TableHead className="text-right">Actions</TableHead>
+              </TableRow>
+            </TableHeader>
+            <TableBody>
+              {staffList.map((staff) => (
+                <TableRow key={staff.id}>
+                  <TableCell className="font-medium">{staff.full_name}</TableCell>
+                  <TableCell>{staff.user_id}</TableCell>
+                  <TableCell>{staffRoles.find(r => r.id === staff.role)?.name || staff.role}</TableCell>
+                  {/* <TableCell>{staff.location_id || '-'}</TableCell> */}
+                  <TableCell className="text-right space-x-2">
+                    <Button variant="outline" size="sm" onClick={() => openEditDialog(staff)}>
+                      <Edit className="h-4 w-4 mr-1" /> Edit
+                    </Button>
+                    <Button variant="destructive" size="sm" onClick={() => handleDelete(staff.id)}>
+                      <Trash2 className="h-4 w-4 mr-1" /> Delete
+                    </Button>
+                  </TableCell>
+                </TableRow>
+              ))}
+              {!loading && staffList.length === 0 && (
+                 <TableRow>
+                    <TableCell colSpan={4} className="text-center text-gray-500 py-4">
+                        No staff members found. Add a new one to get started.
+                    </TableCell>
+                 </TableRow>
+              )}
+            </TableBody>
+          </Table>
+        </Card>
+      )}
+    </div>
+  );
+};
+
+export default StaffManagement;
+
diff --git a/src/components/admin/SystemAnalytics.tsx b/src/components/admin/SystemAnalytics.tsx
new file mode 100644
index 0000000..4f05476
--- /dev/null
+++ b/src/components/admin/SystemAnalytics.tsx
@@ -0,0 +1,110 @@
+import React from 'react';
+import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
+import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line } from 'recharts';
+
+// Mock data - replace with actual data fetching and processing
+const mockAppointmentData = [
+  { date: '2024-05-01', count: 15, type: 'booked' },
+  { date: '2024-05-01', count: 12, type: 'completed' },
+  { date: '2024-05-01', count: 2, type: 'cancelled' },
+  { date: '2024-05-02', count: 20, type: 'booked' },
+  { date: '2024-05-02', count: 18, type: 'completed' },
+  { date: '2024-05-02', count: 1, type: 'cancelled' },
+  { date: '2024-05-03', count: 12, type: 'booked' },
+  { date: '2024-05-03', count: 10, type: 'completed' },
+  { date: '2024-05-03', count: 0, type: 'cancelled' },
+  // Add more data points
+];
+
+const mockQueueData = [
+  { time: '09:00', avgWait: 15, peakSize: 10 },
+  { time: '10:00', avgWait: 20, peakSize: 12 },
+  { time: '11:00', avgWait: 25, peakSize: 15 },
+  { time: '12:00', avgWait: 18, peakSize: 10 },
+  { time: '13:00', avgWait: 22, peakSize: 14 },
+  { time: '14:00', avgWait: 30, peakSize: 18 },
+  { time: '15:00', avgWait: 20, peakSize: 11 },
+  { time: '16:00', avgWait: 15, peakSize: 8 },
+];
+
+const SystemAnalytics: React.FC = () => {
+  // In a real application, you would fetch and process data from your backend.
+  // For example, using a custom hook: `const { data, loading, error } = useAnalyticsData();`
+
+  // Process appointment data for chart
+  const appointmentChartData = mockAppointmentData.reduce((acc, curr) => {
+    let entry = acc.find(item => item.date === curr.date);
+    if (!entry) {
+      entry = { date: curr.date, booked: 0, completed: 0, cancelled: 0 };
+      acc.push(entry);
+    }
+    if (curr.type === 'booked') entry.booked += curr.count;
+    if (curr.type === 'completed') entry.completed += curr.count;
+    if (curr.type === 'cancelled') entry.cancelled += curr.count;
+    return acc;
+  }, [] as Array<{ date: string; booked: number; completed: number; cancelled: number }>);
+
+  return (
+    <div className="space-y-6">
+      <h2 className="text-2xl font-semibold">System Analytics</h2>
+      
+      <Card>
+        <CardHeader>
+          <CardTitle>Appointments Overview</CardTitle>
+          <CardDescription>Daily appointment statistics.</CardDescription>
+        </CardHeader>
+        <CardContent>
+          <ResponsiveContainer width="100%" height={300}>
+            <BarChart data={appointmentChartData}>
+              <CartesianGrid strokeDasharray="3 3" />
+              <XAxis dataKey="date" />
+              <YAxis />
+              <Tooltip />
+              <Legend />
+              <Bar dataKey="booked" fill="#8884d8" name="Booked" />
+              <Bar dataKey="completed" fill="#82ca9d" name="Completed" />
+              <Bar dataKey="cancelled" fill="#ff7300" name="Cancelled" />
+            </BarChart>
+          </ResponsiveContainer>
+        </CardContent>
+      </Card>
+
+      <Card>
+        <CardHeader>
+          <CardTitle>Queue Performance</CardTitle>
+          <CardDescription>Average wait times and peak queue sizes throughout the day.</CardDescription>
+        </CardHeader>
+        <CardContent>
+          <ResponsiveContainer width="100%" height={300}>
+            <LineChart data={mockQueueData}>
+              <CartesianGrid strokeDasharray="3 3" />
+              <XAxis dataKey="time" />
+              <YAxis yAxisId="left" label={{ value: 'Avg Wait (min)', angle: -90, position: 'insideLeft' }} />
+              <YAxis yAxisId="right" orientation="right" label={{ value: 'Peak Size', angle: 90, position: 'insideRight' }} />
+              <Tooltip />
+              <Legend />
+              <Line yAxisId="left" type="monotone" dataKey="avgWait" stroke="#8884d8" name="Avg. Wait Time (min)" />
+              <Line yAxisId="right" type="monotone" dataKey="peakSize" stroke="#82ca9d" name="Peak Queue Size" />
+            </LineChart>
+          </ResponsiveContainer>
+        </CardContent>
+      </Card>
+
+      {/* Add more charts and data displays as needed */}
+      {/* e.g., Staff Performance, Service Popularity, Customer Satisfaction (from surveys) */}
+      <Card>
+        <CardHeader>
+          <CardTitle>More Analytics Coming Soon</CardTitle>
+          <CardDescription>Detailed reports on staff performance, service popularity, and customer feedback will be available here.</CardDescription>
+        </CardHeader>
+        <CardContent>
+            <p className="text-center text-gray-500">Stay tuned for more insights!</p>
+        </CardContent>
+      </Card>
+
+    </div>
+  );
+};
+
+export default SystemAnalytics;
+
diff --git a/src/components/appointments/AppointmentConfirmationStep.tsx b/src/components/appointments/AppointmentConfirmationStep.tsx
new file mode 100644
index 0000000..74b11a0
--- /dev/null
+++ b/src/components/appointments/AppointmentConfirmationStep.tsx
@@ -0,0 +1,103 @@
+import React from 'react';
+import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
+import { Button } from "@/components/ui/button";
+import { CheckCircle, AlertTriangle } from 'lucide-react';
+import { Link } from 'react-router-dom';
+import { Appointment } from '@/hooks/useAppointments'; // Assuming Appointment type is defined
+import { Location } from '@/hooks/useLocations';
+import { Service } from '@/hooks/useServices';
+import { format } from 'date-fns';
+
+interface AppointmentConfirmationStepProps {
+  appointmentDetails: Appointment | null; // Full appointment details from backend
+  location: Location | null;
+  service: Service | null;
+  error?: string | null;
+  onBookAnother: () => void;
+  onGoToDashboard: () => void;
+}
+
+const AppointmentConfirmationStep: React.FC<AppointmentConfirmationStepProps> = ({
+  appointmentDetails,
+  location,
+  service,
+  error,
+  onBookAnother,
+  onGoToDashboard
+}) => {
+  if (error) {
+    return (
+      <Card className="w-full max-w-lg mx-auto text-center">
+        <CardHeader>
+          <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-red-100">
+            <AlertTriangle className="h-6 w-6 text-red-600" aria-hidden="true" />
+          </div>
+          <CardTitle className="mt-4">Booking Failed</CardTitle>
+        </CardHeader>
+        <CardContent>
+          <CardDescription className="text-red-700">
+            Unfortunately, we couldn't book your appointment. Please try again.
+          </CardDescription>
+          <p className="mt-2 text-sm text-gray-500">Error: {error}</p>
+          <Button onClick={onBookAnother} className="mt-6 w-full">
+            Try Again
+          </Button>
+        </CardContent>
+      </Card>
+    );
+  }
+
+  if (!appointmentDetails || !location || !service) {
+    // This case should ideally not happen if an appointment is successfully booked
+    // Or could be a loading state if confirmation details are fetched separately
+    return (
+      <Card className="w-full max-w-lg mx-auto text-center">
+        <CardHeader>
+          <CardTitle>Processing Confirmation...</CardTitle>
+        </CardHeader>
+        <CardContent>
+          <p>Waiting for appointment confirmation details.</p>
+        </CardContent>
+      </Card>
+    );
+  }
+
+  return (
+    <Card className="w-full max-w-lg mx-auto text-center">
+      <CardHeader>
+        <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100">
+          <CheckCircle className="h-6 w-6 text-green-600" aria-hidden="true" />
+        </div>
+        <CardTitle className="mt-4">Appointment Confirmed!</CardTitle>
+        <CardDescription>
+          Your appointment has been successfully booked.
+        </CardDescription>
+      </CardHeader>
+      <CardContent className="text-sm text-gray-700">
+        <div className="space-y-2 text-left">
+          <p><strong>Confirmation ID:</strong> {appointmentDetails.id}</p>
+          <p><strong>Service:</strong> {service.name}</p>
+          <p><strong>Location:</strong> {location.name}</p>
+          {location.address && <p><strong>Address:</strong> {location.address}</p>}
+          <p><strong>Date:</strong> {format(new Date(appointmentDetails.start_time), 'PPP')}</p>
+          <p><strong>Time:</strong> {format(new Date(appointmentDetails.start_time), 'p')} - {format(new Date(appointmentDetails.end_time), 'p')}</p>
+          {appointmentDetails.notes && <p><strong>Notes:</strong> {appointmentDetails.notes}</p>}
+        </div>
+        <p className="mt-4 text-xs text-gray-500">
+          You will receive a confirmation email shortly. Please check your spam folder if you don't see it.
+        </p>
+        <div className="mt-6 flex flex-col sm:flex-row sm:justify-center sm:space-x-4 space-y-2 sm:space-y-0">
+          <Button onClick={onBookAnother} variant="outline">
+            Book Another Appointment
+          </Button>
+          <Button onClick={onGoToDashboard} asChild>
+            <Link to="/customer/dashboard">Go to Dashboard</Link>
+          </Button>
+        </div>
+      </CardContent>
+    </Card>
+  );
+};
+
+export default AppointmentConfirmationStep;
+
diff --git a/src/components/appointments/CustomerDetailsStep.tsx b/src/components/appointments/CustomerDetailsStep.tsx
new file mode 100644
index 0000000..d23171c
--- /dev/null
+++ b/src/components/appointments/CustomerDetailsStep.tsx
@@ -0,0 +1,124 @@
+import React from 'react';
+import { useForm } from 'react-hook-form';
+import { zodResolver } from '@hookform/resolvers/zod';
+import * as z from 'zod';
+import { Button } from "@/components/ui/button";
+import {
+  Form,
+  FormControl,
+  FormDescription,
+  FormField,
+  FormItem,
+  FormLabel,
+  FormMessage,
+} from "@/components/ui/form";
+import { Input } from "@/components/ui/input";
+import { Textarea } from "@/components/ui/textarea";
+import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
+
+// Define the Zod schema for form validation
+const customerDetailsSchema = z.object({
+  fullName: z.string().min(2, { message: "Full name must be at least 2 characters." }),
+  email: z.string().email({ message: "Invalid email address." }),
+  phone: z.string().min(10, { message: "Phone number must be at least 10 digits." }).optional(), // Optional phone number
+  notes: z.string().max(500, { message: "Notes cannot exceed 500 characters." }).optional(),
+});
+
+export type CustomerDetailsFormData = z.infer<typeof customerDetailsSchema>;
+
+interface CustomerDetailsStepProps {
+  onSubmit: (data: CustomerDetailsFormData) => void;
+  isSubmitting?: boolean;
+}
+
+const CustomerDetailsStep: React.FC<CustomerDetailsStepProps> = ({ onSubmit, isSubmitting }) => {
+  const form = useForm<CustomerDetailsFormData>({
+    resolver: zodResolver(customerDetailsSchema),
+    defaultValues: {
+      fullName: "",
+      email: "",
+      phone: "",
+      notes: "",
+    },
+  });
+
+  return (
+    <Card className="w-full max-w-lg mx-auto">
+      <CardHeader>
+        <CardTitle>Your Details</CardTitle>
+        <CardDescription>Please provide your information to complete the booking.</CardDescription>
+      </CardHeader>
+      <CardContent>
+        <Form {...form}>
+          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
+            <FormField
+              control={form.control}
+              name="fullName"
+              render={({ field }) => (
+                <FormItem>
+                  <FormLabel>Full Name</FormLabel>
+                  <FormControl>
+                    <Input placeholder="e.g., Jane Doe" {...field} />
+                  </FormControl>
+                  <FormMessage />
+                </FormItem>
+              )}
+            />
+            <FormField
+              control={form.control}
+              name="email"
+              render={({ field }) => (
+                <FormItem>
+                  <FormLabel>Email Address</FormLabel>
+                  <FormControl>
+                    <Input type="email" placeholder="e.g., jane.doe@example.com" {...field} />
+                  </FormControl>
+                  <FormMessage />
+                </FormItem>
+              )}
+            />
+            <FormField
+              control={form.control}
+              name="phone"
+              render={({ field }) => (
+                <FormItem>
+                  <FormLabel>Phone Number (Optional)</FormLabel>
+                  <FormControl>
+                    <Input type="tel" placeholder="e.g., (555) 123-4567" {...field} />
+                  </FormControl>
+                  <FormMessage />
+                </FormItem>
+              )}
+            />
+            <FormField
+              control={form.control}
+              name="notes"
+              render={({ field }) => (
+                <FormItem>
+                  <FormLabel>Additional Notes (Optional)</FormLabel>
+                  <FormControl>
+                    <Textarea
+                      placeholder="Any special requests or information..."
+                      className="resize-none"
+                      {...field}
+                    />
+                  </FormControl>
+                  <FormDescription>
+                    Max 500 characters.
+                  </FormDescription>
+                  <FormMessage />
+                </FormItem>
+              )}
+            />
+            <Button type="submit" className="w-full" disabled={isSubmitting}>
+              {isSubmitting ? 'Booking...' : 'Confirm Appointment'}
+            </Button>
+          </form>
+        </Form>
+      </CardContent>
+    </Card>
+  );
+};
+
+export default CustomerDetailsStep;
+
diff --git a/src/components/appointments/DateTimeSelectionStep.tsx b/src/components/appointments/DateTimeSelectionStep.tsx
new file mode 100644
index 0000000..4a2487e
--- /dev/null
+++ b/src/components/appointments/DateTimeSelectionStep.tsx
@@ -0,0 +1,109 @@
+import React, { useState, useEffect, useMemo } from 'react';
+import { Calendar } from "@/components/ui/calendar";
+import { Button } from "@/components/ui/button";
+import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
+import { useAvailability, DailyAvailability, TimeSlot } from '@/hooks/useAvailability'; // Adjust path as needed
+import { Service } from '@/hooks/useServices'; // Assuming Service type is exported
+import { Location } from '@/hooks/useLocations'; // Assuming Location type is exported
+import { format, addDays, startOfDay } from 'date-fns';
+import { Loader2 } from 'lucide-react';
+
+interface DateTimeSelectionStepProps {
+  selectedLocation: Location;
+  selectedService: Service;
+  onDateTimeSelect: (dateTime: Date) => void;
+  // Optional: if we want to pre-select a date/time
+  // currentSelectedDateTime?: Date;
+}
+
+const DateTimeSelectionStep: React.FC<DateTimeSelectionStepProps> = ({ selectedLocation, selectedService, onDateTimeSelect }) => {
+  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());
+  const [selectedTimeSlot, setSelectedTimeSlot] = useState<TimeSlot | undefined>(undefined);
+  const { availability, loading, error, fetchAvailability } = useAvailability();
+
+  // Fetch availability when selectedDate, location, or service changes
+  useEffect(() => {
+    if (selectedDate && selectedLocation && selectedService) {
+      const startDate = format(selectedDate, 'yyyy-MM-dd');
+      // Fetch for a range, e.g., 7 days, or adjust as needed by backend capabilities
+      const endDate = format(addDays(selectedDate, 0), 'yyyy-MM-dd'); // For now, just fetching for the selected day
+      fetchAvailability(selectedLocation.id, selectedService.id, startDate, endDate);
+    }
+  }, [selectedDate, selectedLocation, selectedService, fetchAvailability]);
+
+  const handleDateSelect = (date?: Date) => {
+    setSelectedDate(date ? startOfDay(date) : undefined);
+    setSelectedTimeSlot(undefined); // Reset time slot when date changes
+  };
+
+  const handleTimeSelect = (slot: TimeSlot) => {
+    setSelectedTimeSlot(slot);
+    if (selectedDate) {
+      const [hours, minutes] = slot.time.split(':').map(Number);
+      const combinedDateTime = new Date(selectedDate);
+      combinedDateTime.setHours(hours, minutes, 0, 0);
+      onDateTimeSelect(combinedDateTime);
+    }
+  };
+
+  const availableSlotsForSelectedDate: TimeSlot[] = useMemo(() => {
+    if (!selectedDate || availability.length === 0) return [];
+    const dateStr = format(selectedDate, 'yyyy-MM-dd');
+    const dayData = availability.find(day => day.date === dateStr);
+    return dayData ? dayData.slots.filter(slot => slot.available) : [];
+  }, [selectedDate, availability]);
+
+  return (
+    <Card className="w-full max-w-2xl mx-auto">
+      <CardHeader>
+        <CardTitle>Select Date & Time</CardTitle>
+        <CardDescription>
+          Choose an available date and time slot for your {selectedService.name} at {selectedLocation.name}.
+        </CardDescription>
+      </CardHeader>
+      <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-6">
+        <div>
+          <h3 className="text-lg font-medium mb-2">Select Date</h3>
+          <Calendar
+            mode="single"
+            selected={selectedDate}
+            onSelect={handleDateSelect}
+            className="rounded-md border p-0"
+            disabled={(date) => date < startOfDay(new Date())} // Disable past dates
+          />
+        </div>
+        <div>
+          <h3 className="text-lg font-medium mb-2">Select Time {selectedDate ? `for ${format(selectedDate, 'PPP')}` : ''}</h3>
+          {loading && (
+            <div className="flex items-center">
+              <Loader2 className="h-5 w-5 animate-spin mr-2" /> Loading slots...
+            </div>
+          )}
+          {error && <p className="text-red-500">Error loading time slots: {error.message || 'Unknown error'}</p>}
+          {!loading && !error && selectedDate && (
+            <div className="grid grid-cols-3 gap-2 max-h-72 overflow-y-auto pr-2">
+              {availableSlotsForSelectedDate.length > 0 ? (
+                availableSlotsForSelectedDate.map((slot) => (
+                  <Button
+                    key={slot.time}
+                    variant={selectedTimeSlot?.time === slot.time ? "default" : "outline"}
+                    onClick={() => handleTimeSelect(slot)}
+                    disabled={!slot.available}
+                  >
+                    {slot.time}
+                  </Button>
+                ))
+              ) : (
+                <p className="col-span-3 text-muted-foreground">No available slots for this date.</p>
+              )}
+            </div>
+          )}
+          {!selectedDate && <p className="text-muted-foreground">Please select a date to see available times.</p>}
+        </div>
+      </CardContent>
+    </Card>
+  );
+};
+
+export default DateTimeSelectionStep;
+
diff --git a/src/components/surveys/SurveyForm.tsx b/src/components/surveys/SurveyForm.tsx
new file mode 100644
index 0000000..4dce432
--- /dev/null
+++ b/src/components/surveys/SurveyForm.tsx
@@ -0,0 +1,175 @@
+import React, { useState, useEffect } from 'react';
+import { useForm, Controller } from 'react-hook-form';
+import { zodResolver } from '@hookform/resolvers/zod';
+import * as z from 'zod';
+import { Button } from "@/components/ui/button";
+import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
+import { Label } from "@/components/ui/label";
+import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
+import { Textarea } from "@/components/ui/textarea";
+import { Input } from "@/components/ui/input"; // For potential future use, e.g., text input for 'other' option
+import { useSurveys, Survey, SurveyQuestion, SurveyResponse } from '@/hooks/useSurveys'; // Adjust path as needed
+import { Loader2, Send } from 'lucide-react';
+
+// Define a schema for a single question's answer based on its type
+const createAnswerSchema = (questionType: SurveyQuestion['question_type']) => {
+  switch (questionType) {
+    case 'rating':
+      return z.number().min(1).max(5); // Assuming a 1-5 rating scale for simplicity
+    case 'text':
+      return z.string().min(1, { message: "Please provide an answer." }).max(500, { message: "Answer too long." });
+    case 'multiple_choice':
+      return z.string().min(1, { message: "Please select an option." });
+    default:
+      return z.any();
+  }
+};
+
+interface SurveyFormProps {
+  surveyId: string; // To fetch the specific survey
+  appointmentId?: string; // Optional: to link response to an appointment
+  onSurveyComplete: () => void;
+}
+
+const SurveyForm: React.FC<SurveyFormProps> = ({ surveyId, appointmentId, onSurveyComplete }) => {
+  const { survey, questions, loading, error, submitting, fetchSurveyWithQuestions, submitSurveyResponse } = useSurveys();
+  const [formSchema, setFormSchema] = useState<z.ZodObject<any> | null>(null);
+
+  useEffect(() => {
+    fetchSurveyWithQuestions(surveyId);
+  }, [fetchSurveyWithQuestions, surveyId]);
+
+  // Dynamically build Zod schema based on fetched questions
+  useEffect(() => {
+    if (questions.length > 0) {
+      const schemaShape: { [key: string]: z.ZodTypeAny } = {};
+      questions.forEach(q => {
+        schemaShape[q.id] = createAnswerSchema(q.question_type);
+      });
+      setFormSchema(z.object(schemaShape));
+    }
+  }, [questions]);
+
+  const form = useForm<Record<string, any>>({
+    resolver: formSchema ? zodResolver(formSchema) : undefined,
+  });
+
+  const onSubmit = async (data: Record<string, any>) => {
+    if (!survey) return;
+
+    const answers = Object.entries(data).map(([question_id, answer]) => ({
+      question_id,
+      answer,
+    }));
+
+    const response: SurveyResponse = {
+      survey_id: survey.id,
+      appointment_id: appointmentId,
+      answers,
+    };
+
+    try {
+      await submitSurveyResponse(response);
+      // alert('Survey submitted successfully!'); // Or use a toast notification
+      onSurveyComplete();
+    } catch (err) {
+      console.error("Survey submission failed:", err);
+      // alert('Failed to submit survey. Please try again.'); // Or use a toast notification
+      form.setError("root.serverError", { type: "manual", message: "Failed to submit survey. Please try again." });
+    }
+  };
+
+  if (loading || !formSchema) {
+    return (
+      <div className="flex justify-center items-center py-8">
+        <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
+        <p className="ml-2">Loading survey...</p>
+      </div>
+    );
+  }
+
+  if (error) {
+    return <p className="text-red-500 text-center">Error loading survey: {error.message || 'Unknown error'}</p>;
+  }
+
+  if (!survey || questions.length === 0) {
+    return <p className="text-center text-gray-500">Survey not found or no questions available.</p>;
+  }
+
+  return (
+    <Card className="w-full max-w-2xl mx-auto">
+      <CardHeader>
+        <CardTitle>{survey.title || 'Feedback Survey'}</CardTitle>
+        {survey.description && <CardDescription>{survey.description}</CardDescription>}
+      </CardHeader>
+      <CardContent>
+        <Form {...form}>
+          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
+            {questions.map((question) => (
+              <FormField
+                key={question.id}
+                control={form.control}
+                name={question.id}
+                render={({ field }) => (
+                  <FormItem>
+                    <FormLabel className="text-base">{question.question_text}</FormLabel>
+                    <FormControl>
+                      <>
+                        {question.question_type === 'rating' && (
+                          // Simple 1-5 rating, could be stars or radio buttons
+                          <RadioGroup
+                            onValueChange={(value) => field.onChange(parseInt(value))}
+                            defaultValue={field.value?.toString()}
+                            className="flex space-x-2"
+                          >
+                            {[1, 2, 3, 4, 5].map(num => (
+                              <FormItem key={num} className="flex items-center space-x-1 space-y-0">
+                                <FormControl>
+                                  <RadioGroupItem value={num.toString()} />
+                                </FormControl>
+                                <FormLabel className="font-normal">{num}</FormLabel>
+                              </FormItem>
+                            ))}
+                          </RadioGroup>
+                        )}
+                        {question.question_type === 'text' && (
+                          <Textarea placeholder="Your answer..." {...field} />
+                        )}
+                        {question.question_type === 'multiple_choice' && question.options && (
+                          <RadioGroup
+                            onValueChange={field.onChange}
+                            defaultValue={field.value}
+                            className="flex flex-col space-y-1"
+                          >
+                            {question.options.map((option, index) => (
+                              <FormItem key={index} className="flex items-center space-x-3 space-y-0">
+                                <FormControl>
+                                  <RadioGroupItem value={option} />
+                                </FormControl>
+                                <FormLabel className="font-normal">{option}</FormLabel>
+                              </FormItem>
+                            ))}
+                          </RadioGroup>
+                        )}
+                      </>
+                    </FormControl>
+                    <FormMessage />
+                  </FormItem>
+                )}
+              />
+            ))}
+            {form.formState.errors.root?.serverError && (
+                <p className="text-sm font-medium text-destructive">{form.formState.errors.root.serverError.message}</p>
+            )}
+            <Button type="submit" className="w-full" disabled={submitting}>
+              {submitting ? <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Submitting...</> : <><Send className="mr-2 h-4 w-4" /> Submit Survey</>}
+            </Button>
+          </form>
+        </Form>
+      </CardContent>
+    </Card>
+  );
+};
+
+export default SurveyForm;
+
diff --git a/src/hooks/useSurveys.ts b/src/hooks/useSurveys.ts
new file mode 100644
index 0000000..d1547ea
--- /dev/null
+++ b/src/hooks/useSurveys.ts
@@ -0,0 +1,113 @@
+import { useCallback, useState } from "react";
+import { supabase } from "../integrations/supabase/client"; // Adjust path as needed
+import { Database } from "../integrations/supabase/types"; // Adjust path as needed
+
+export type Survey = Database["public"]["Tables"]["surveys"]["Row"];
+export type SurveyQuestion = {
+  id: string;
+  survey_id: string;
+  question_text: string;
+  question_type: "rating" | "text" | "multiple_choice"; // Example types
+  options?: string[]; // For multiple_choice
+  created_at: string;
+};
+
+export type SurveyResponse = {
+  id?: string;
+  survey_id: string;
+  user_id?: string; // Or customer_id
+  appointment_id?: string;
+  answers: { question_id: string; answer: any }[];
+  submitted_at?: string;
+};
+
+export const useSurveys = () => {
+  const [survey, setSurvey] = useState<Survey | null>(null);
+  const [questions, setQuestions] = useState<SurveyQuestion[]>([]);
+  const [loading, setLoading] = useState<boolean>(false);
+  const [error, setError] = useState<any>(null);
+  const [submitting, setSubmitting] = useState<boolean>(false);
+
+  const fetchSurveyWithQuestions = useCallback(async (surveyId: string) => {
+    setLoading(true);
+    setError(null);
+    try {
+      // First, fetch the survey details
+      const { data: surveyData, error: surveyError } = await supabase
+        .from("surveys")
+        .select("*")
+        .eq("id", surveyId)
+        .single();
+
+      if (surveyError) throw surveyError;
+      setSurvey(surveyData);
+
+      // Then, fetch the questions for that survey (assuming a related table or a JSONB field for questions)
+      // This is a placeholder. You might have a separate `survey_questions` table.
+      // For this example, let's assume questions are hardcoded or fetched differently.
+      // In a real scenario, you would query `survey_questions` table where `survey_id` matches.
+      const mockQuestions: SurveyQuestion[] = [
+        {
+          id: "q1",
+          survey_id: surveyId,
+          question_text: "How satisfied are you with our service?",
+          question_type: "rating", // 1-5 stars
+          created_at: new Date().toISOString(),
+        },
+        {
+          id: "q2",
+          survey_id: surveyId,
+          question_text: "How likely are you to recommend us to a friend?",
+          question_type: "rating", // 0-10 scale
+          created_at: new Date().toISOString(),
+        },
+        {
+          id: "q3",
+          survey_id: surveyId,
+          question_text: "Any additional comments or suggestions?",
+          question_type: "text",
+          created_at: new Date().toISOString(),
+        },
+      ];
+      setQuestions(mockQuestions);
+
+    } catch (e) {
+      setError(e);
+      console.error("Error fetching survey:", e);
+      setSurvey(null);
+      setQuestions([]);
+    } finally {
+      setLoading(false);
+    }
+  }, []);
+
+  const submitSurveyResponse = useCallback(async (response: SurveyResponse) => {
+    setSubmitting(true);
+    setError(null);
+    try {
+      // In a real app, you would get the user_id from auth state
+      const { data: { user } } = await supabase.auth.getUser();
+      response.user_id = user?.id;
+      response.submitted_at = new Date().toISOString();
+
+      // Assuming you have a `survey_responses` table
+      // This is a placeholder for the actual table structure
+      const { data, error: submissionError } = await supabase
+        .from("survey_responses") // Replace with your actual table name for responses
+        .insert([response])
+        .select();
+
+      if (submissionError) throw submissionError;
+      return data;
+    } catch (e) {
+      setError(e);
+      console.error("Error submitting survey response:", e);
+      throw e;
+    } finally {
+      setSubmitting(false);
+    }
+  }, []);
+
+  return { survey, questions, loading, error, submitting, fetchSurveyWithQuestions, submitSurveyResponse };
+};
+
diff --git a/src/pages/CustomerDashboardPage.tsx b/src/pages/CustomerDashboardPage.tsx
new file mode 100644
index 0000000..7be64e0
--- /dev/null
+++ b/src/pages/CustomerDashboardPage.tsx
@@ -0,0 +1,131 @@
+import React, { useEffect } from 'react';
+import { Link } from 'react-router-dom';
+import { useAppointments, Appointment } from '@/hooks/useAppointments'; // Adjust path as needed
+import { Button } from "@/components/ui/button";
+import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
+import { Badge } from "@/components/ui/badge";
+import { format } from 'date-fns';
+import { Loader2, PlusCircle } from 'lucide-react';
+
+// Mock function to get current user ID - replace with actual auth context
+const getCurrentUserId = () => {
+  // In a real app, this would come from your auth context or similar
+  return 'user-123-placeholder'; 
+};
+
+const CustomerDashboardPage: React.FC = () => {
+  const { appointments, loading, error, fetchAppointments, cancelAppointment } = useAppointments();
+  const userId = getCurrentUserId();
+
+  useEffect(() => {
+    if (userId) {
+      fetchAppointments({ userId }); // Fetch appointments for the current user
+    }
+  }, [fetchAppointments, userId]);
+
+  const handleCancelAppointment = async (appointmentId: string) => {
+    if (window.confirm('Are you sure you want to cancel this appointment?')) {
+      try {
+        await cancelAppointment(appointmentId);
+        // Optionally, refetch appointments or filter out the cancelled one locally
+        if (userId) fetchAppointments({ userId }); 
+      } catch (err) {
+        // Handle error (e.g., show a toast notification)
+        console.error('Failed to cancel appointment:', err);
+        alert('Failed to cancel appointment. Please try again.');
+      }
+    }
+  };
+
+  return (
+    <div className="container mx-auto px-4 py-8">
+      <div className="flex justify-between items-center mb-6">
+        <h1 className="text-3xl font-bold">My Appointments</h1>
+        <Button asChild>
+          <Link to="/book-appointment">
+            <PlusCircle className="mr-2 h-4 w-4" /> Book New Appointment
+          </Link>
+        </Button>
+      </div>
+
+      <Card>
+        <CardHeader>
+          <CardTitle>Upcoming & Past Appointments</CardTitle>
+          <CardDescription>View and manage your scheduled appointments.</CardDescription>
+        </CardHeader>
+        <CardContent>
+          {loading && (
+            <div className="flex justify-center items-center py-8">
+              <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
+              <p className="ml-2">Loading appointments...</p>
+            </div>
+          )}
+          {error && <p className="text-red-500 text-center">Error loading appointments: {error.message || 'Unknown error'}</p>}
+          {!loading && !error && appointments.length === 0 && (
+            <p className="text-center text-gray-500">You have no appointments scheduled.</p>
+          )}
+          {!loading && !error && appointments.length > 0 && (
+            <Table>
+              <TableHeader>
+                <TableRow>
+                  <TableHead>Service</TableHead>
+                  <TableHead>Location</TableHead>
+                  <TableHead>Date</TableHead>
+                  <TableHead>Time</TableHead>
+                  <TableHead>Status</TableHead>
+                  <TableHead>Actions</TableHead>
+                </TableRow>
+              </TableHeader>
+              <TableBody>
+                {appointments.map((appt) => (
+                  <TableRow key={appt.id}>
+                    <TableCell>{appt.service_id}</TableCell> {/* Replace with service name once available */}
+                    <TableCell>{appt.location_id}</TableCell> {/* Replace with location name once available */}
+                    <TableCell>{format(new Date(appt.start_time), 'PPP')}</TableCell>
+                    <TableCell>{format(new Date(appt.start_time), 'p')} - {format(new Date(appt.end_time), 'p')}</TableCell>
+                    <TableCell>
+                      <Badge 
+                        variant={appt.status === 'confirmed' ? 'default' : appt.status === 'cancelled' ? 'destructive' : 'secondary'}
+                      >
+                        {appt.status}
+                      </Badge>
+                    </TableCell>
+                    <TableCell>
+                      {appt.status === 'confirmed' && (
+                        <Button variant="outline" size="sm" onClick={() => handleCancelAppointment(appt.id)}>
+                          Cancel
+                        </Button>
+                      )}
+                    </TableCell>
+                  </TableRow>
+                ))}
+              </TableBody>
+            </Table>
+          )}
+        </CardContent>
+      </Card>
+
+      {/* Placeholder for Queue Status - to be developed further */}
+      <Card className="mt-8">
+        <CardHeader>
+          <CardTitle>Live Queue Status</CardTitle>
+          <CardDescription>Check your current position in the queue if you are waiting.</CardDescription>
+        </CardHeader>
+        <CardContent>
+          <p className="text-center text-gray-500">Queue status feature coming soon.</p>
+          {/* 
+            Example of what might be here:
+            - If in queue: Display position, estimated wait time.
+            - If not in queue: Message indicating so.
+            - This would require real-time updates, possibly via Supabase Realtime.
+          */}
+        </CardContent>
+      </Card>
+
+    </div>
+  );
+};
+
+export default CustomerDashboardPage;
+
diff --git a/src/pages/StaffQueueManagementPage.tsx b/src/pages/StaffQueueManagementPage.tsx
new file mode 100644
index 0000000..1f3b8f3
--- /dev/null
+++ b/src/pages/StaffQueueManagementPage.tsx
@@ -0,0 +1,209 @@
+import React, { useState, useEffect, useCallback } from 'react';
+import { supabase } from '@/integrations/supabase/client'; // Adjust path
+import { Database } from '@/integrations/supabase/types'; // Adjust path
+import { useAppointments, Appointment } from '@/hooks/useAppointments'; // Assuming this hook can fetch by status
+import { Button } from "@/components/ui/button";
+import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
+import { Loader2, AlertCircle, UserCheck, UserX, PhoneCall, SkipForward } from 'lucide-react';
+import { useLocations, Location } from '@/hooks/useLocations'; // To select a location
+
+// Define possible appointment statuses relevant to queue management
+const QUEUE_STATUSES = ['booked', 'checked_in', 'called', 'serving', 'completed', 'no_show', 'cancelled'] as const;
+type QueueStatus = typeof QUEUE_STATUSES[number];
+
+interface StaffQueueManagementProps {
+  // staffId: string; // To filter queues/locations relevant to the staff if needed
+}
+
+const StaffQueueManagementPage: React.FC<StaffQueueManagementProps> = () => {
+  const { locations, fetchLocations, loading: locationsLoading } = useLocations();
+  const [selectedLocationId, setSelectedLocationId] = useState<string | null>(null);
+  const [queue, setQueue] = useState<Appointment[]>([]);
+  const [loadingQueue, setLoadingQueue] = useState(false);
+  const [errorQueue, setErrorQueue] = useState<string | null>(null);
+  const { updateAppointment } = useAppointments(); // Assuming updateAppointment can change status
+
+  useEffect(() => {
+    fetchLocations();
+  }, [fetchLocations]);
+
+  const fetchQueueForLocation = useCallback(async (locationId: string) => {
+    if (!locationId) return;
+    setLoadingQueue(true);
+    setErrorQueue(null);
+    try {
+      // Fetch appointments that are in a queue-relevant status for the selected location
+      // This might need specific filtering in your Supabase query/function
+      const { data, error } = await supabase
+        .from('appointments')
+        .select('*, services(name), locations(name)') // Adjust select as needed
+        .eq('location_id', locationId)
+        .in('status', ['booked', 'checked_in', 'called']) // Relevant statuses for an active queue
+        .order('created_at', { ascending: true }); // Or by appointment_time
+
+      if (error) throw error;
+      setQueue(data as any[] || []);
+    } catch (e: any) {
+      console.error("Failed to fetch queue:", e);
+      setErrorQueue(e.message || "Failed to load queue for the location.");
+      setQueue([]);
+    } finally {
+      setLoadingQueue(false);
+    }
+  }, []);
+
+  useEffect(() => {
+    if (selectedLocationId) {
+      fetchQueueForLocation(selectedLocationId);
+    }
+  }, [selectedLocationId, fetchQueueForLocation]);
+
+  const handleLocationChange = (locationId: string) => {
+    setSelectedLocationId(locationId);
+    setQueue([]); // Clear previous queue
+  };
+
+  const callNextCustomer = async () => {
+    if (!selectedLocationId) return;
+    setLoadingQueue(true);
+    try {
+      // This logic should ideally be in a Supabase Edge Function `callNextInQueue`
+      // For now, we'll find the first 'checked_in' or 'booked' customer and update their status to 'called'
+      const nextCustomer = queue.find(app => app.status === 'checked_in' || app.status === 'booked');
+      if (nextCustomer) {
+        await updateAppointmentStatus(nextCustomer.id, 'called');
+      } else {
+        alert("No customers available to call.");
+      }
+    } catch (e: any) {
+      alert(`Error calling next customer: ${e.message}`);
+    } finally {
+      setLoadingQueue(false);
+      if (selectedLocationId) fetchQueueForLocation(selectedLocationId); // Refresh queue
+    }
+  };
+
+  const updateAppointmentStatus = async (appointmentId: string, status: QueueStatus) => {
+    setLoadingQueue(true);
+    try {
+      await updateAppointment(appointmentId, { status });
+      // Optionally, send notifications based on status change here or via a Supabase Function trigger
+    } catch (e: any) {
+      console.error(`Failed to update appointment ${appointmentId} to status ${status}:`, e);
+      alert(`Error updating status: ${e.message}`);
+      // Re-throw to be caught by calling function if needed for UI updates
+      throw e;
+    } finally {
+      setLoadingQueue(false);
+      if (selectedLocationId) fetchQueueForLocation(selectedLocationId); // Refresh queue
+    }
+  };
+
+  return (
+    <div className="space-y-6">
+      <h2 className="text-2xl font-semibold">Staff Queue Management</h2>
+
+      <Card>
+        <CardHeader>
+          <CardTitle>Select Location</CardTitle>
+        </CardHeader>
+        <CardContent>
+          {locationsLoading ? (
+            <Loader2 className="h-5 w-5 animate-spin" />
+          ) : (
+            <Select onValueChange={handleLocationChange} value={selectedLocationId || undefined}>
+              <SelectTrigger className="w-[280px]">
+                <SelectValue placeholder="Select a location to manage queue" />
+              </SelectTrigger>
+              <SelectContent>
+                {locations.map(loc => (
+                  <SelectItem key={loc.id} value={loc.id}>{loc.name}</SelectItem>
+                ))}
+              </SelectContent>
+            </Select>
+          )}
+        </CardContent>
+      </Card>
+
+      {selectedLocationId && (
+        <Card>
+          <CardHeader>
+            <div className="flex justify-between items-center">
+                <CardTitle>Current Queue: {locations.find(l => l.id === selectedLocationId)?.name}</CardTitle>
+                <Button onClick={callNextCustomer} disabled={loadingQueue || !queue.some(app => app.status === 'checked_in' || app.status === 'booked')}>
+                    <PhoneCall className="mr-2 h-4 w-4" /> Call Next Customer
+                </Button>
+            </div>
+            <CardDescription>Manage customers waiting for service.</CardDescription>
+          </CardHeader>
+          <CardContent>
+            {loadingQueue && <div className="flex items-center justify-center py-4"><Loader2 className="h-8 w-8 animate-spin" /><p className="ml-2">Loading queue...</p></div>}
+            {errorQueue && <p className="text-red-500"><AlertCircle className="inline mr-1" /> {errorQueue}</p>}
+            {!loadingQueue && !errorQueue && (
+              <Table>
+                <TableHeader>
+                  <TableRow>
+                    <TableHead>Customer Name</TableHead>
+                    <TableHead>Service</TableHead>
+                    <TableHead>Status</TableHead>
+                    <TableHead>Booked/Checked-in At</TableHead>
+                    <TableHead className="text-right">Actions</TableHead>
+                  </TableRow>
+                </TableHeader>
+                <TableBody>
+                  {queue.length > 0 ? queue.map(app => (
+                    <TableRow key={app.id}>
+                      <TableCell>{app.customer_name || 'N/A'}</TableCell>
+                      <TableCell>{(app as any).services?.name || 'N/A'}</TableCell>
+                      <TableCell>
+                        <span className={`px-2 py-1 text-xs font-semibold rounded-full 
+                          ${app.status === 'called' ? 'bg-yellow-200 text-yellow-800' : 
+                            app.status === 'serving' ? 'bg-blue-200 text-blue-800' : 
+                            app.status === 'checked_in' ? 'bg-green-200 text-green-800' : 
+                            'bg-gray-200 text-gray-800'}`}>
+                          {app.status}
+                        </span>
+                      </TableCell>
+                      <TableCell>{new Date(app.created_at).toLocaleTimeString()}</TableCell> {/* Or app.appointment_time */}
+                      <TableCell className="text-right space-x-1">
+                        {app.status === 'called' && (
+                          <Button variant="outline" size="sm" onClick={() => updateAppointmentStatus(app.id, 'serving')} disabled={loadingQueue}>
+                            Start Serving
+                          </Button>
+                        )}
+                        {(app.status === 'checked_in' || app.status === 'booked') && app.status !== 'called' && (
+                            <Button variant="outline" size="sm" onClick={() => updateAppointmentStatus(app.id, 'called')} disabled={loadingQueue}>
+                                <PhoneCall className="h-3 w-3 mr-1" /> Call
+                            </Button>
+                        )}
+                        {app.status === 'serving' && (
+                          <Button variant="default" size="sm" onClick={() => updateAppointmentStatus(app.id, 'completed')} disabled={loadingQueue}>
+                            <UserCheck className="h-3 w-3 mr-1" /> Mark Served
+                          </Button>
+                        )}
+                         {(app.status === 'booked' || app.status === 'checked_in' || app.status === 'called') && (
+                            <Button variant="ghost" size="sm" onClick={() => updateAppointmentStatus(app.id, 'no_show')} disabled={loadingQueue} title="Mark as No Show">
+                                <UserX className="h-3 w-3"/>
+                            </Button>
+                        )}
+                      </TableCell>
+                    </TableRow>
+                  )) : (
+                    <TableRow>
+                      <TableCell colSpan={5} className="text-center text-gray-500 py-4">No customers in the queue for this location.</TableCell>
+                    </TableRow>
+                  )}
+                </TableBody>
+              </Table>
+            )}
+          </CardContent>
+        </Card>
+      )}
+    </div>
+  );
+};
+
+export default StaffQueueManagementPage;
+
diff --git a/src/pages/TakeSurveyPage.tsx b/src/pages/TakeSurveyPage.tsx
new file mode 100644
index 0000000..163af1d
--- /dev/null
+++ b/src/pages/TakeSurveyPage.tsx
@@ -0,0 +1,32 @@
+import React from 'react';
+import { useParams, useNavigate } from 'react-router-dom';
+import SurveyForm from '@/components/surveys/SurveyForm'; // Adjust path as needed
+import { ArrowLeft } from 'lucide-react';
+import { Button } from '@/components/ui/button';
+
+const TakeSurveyPage: React.FC = () => {
+  const { surveyId } = useParams<{ surveyId: string }>();
+  const navigate = useNavigate();
+
+  if (!surveyId) {
+    return <p>Survey ID is missing.</p>;
+  }
+
+  const handleSurveyComplete = () => {
+    // Navigate to a thank you page, or back to dashboard, or show a message
+    alert('Thank you for completing the survey!');
+    navigate('/customer/dashboard'); // Example navigation
+  };
+
+  return (
+    <div className="container mx-auto px-4 py-8">
+      <Button variant="outline" size="sm" onClick={() => navigate(-1)} className="mb-4">
+        <ArrowLeft className="mr-2 h-4 w-4" /> Back
+      </Button>
+      <SurveyForm surveyId={surveyId} onSurveyComplete={handleSurveyComplete} />
+    </div>
+  );
+};
+
+export default TakeSurveyPage;
+
-- 
2.34.1

